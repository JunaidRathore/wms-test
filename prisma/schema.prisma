generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Location {
  id               String         @id @default(cuid())
  aisle            String
  bay              String
  height           String
  label            String         @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  type             String
  putawayBatches   PutawayBatch[]
  stocks           Stock[]
  fromTransactions Transaction[]  @relation("FromLocation")
  toTransactions   Transaction[]  @relation("ToLocation")

  @@index([label])
}

model Company {
  id        String   @id @default(cuid())
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Item[]
  users     User[]
  orders    Order[]  // Added this line

  @@index([code])
}

model Item {
  id           String        @id @default(cuid())
  sku          String
  name         String
  description  String?
  barcode      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id])
  stocks       Stock[]
  transactions Transaction[]
  orderItems   OrderItem[]   // Added this line

  @@unique([companyId, sku])
  @@unique([companyId, barcode])
  @@index([companyId, sku, barcode])
}

model Stock {
  id         String   @id @default(cuid())
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  itemId     String
  locationId String
  item       Item     @relation(fields: [itemId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@unique([itemId, locationId])
  @@index([itemId])
  @@index([locationId])
}

model Transaction {
  id             String        @id @default(cuid())
  quantity       Int
  type           String    // ADD, REMOVE, MOVE
  status         String        @default("COMPLETED")
  createdAt      DateTime      @default(now())
  undoneAt       DateTime?
  itemId         String
  fromLocationId String?
  toLocationId   String?
  userId         String?
  putawayBatchId String?
  fromLocation   Location?     @relation("FromLocation", fields: [fromLocationId], references: [id])
  item           Item          @relation(fields: [itemId], references: [id])
  putawayBatch   PutawayBatch? @relation(fields: [putawayBatchId], references: [id])
  toLocation     Location?     @relation("ToLocation", fields: [toLocationId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])

  @@index([itemId])
  @@index([fromLocationId])
  @@index([toLocationId])
  @@index([putawayBatchId])
  @@index([userId])
}

model User {
  id             String        @id @default(cuid())
  username       String        @unique
  passwordHash   String
  role           String    // Changed from UserRole enum to String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  companyId      String?
  transactions   Transaction[]
  company        Company?      @relation(fields: [companyId], references: [id])
  pickedOrders   Order[]       @relation("PickedBy")
  createdOrders  Order[]       @relation("CreatedBy")

  @@index([username])
  @@index([companyId])
}

model PutawayBatch {
  id           String        @id @default(cuid())
  locationId   String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  status       String        @default("COMPLETED")
  location     Location      @relation(fields: [locationId], references: [id])
  transactions Transaction[]

  @@index([locationId])
}

model Order {
  id          String       @id @default(cuid())
  orderNumber String       @unique
  status      String       @default("PENDING") // PENDING, PICKING, COMPLETED, CANCELLED
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orderItems  OrderItem[]
  pickedBy    User?        @relation("PickedBy", fields: [pickedById], references: [id])
  pickedById  String?
  createdBy   User         @relation("CreatedBy", fields: [createdById], references: [id])
  createdById String
  companyId   String
  company     Company      @relation(fields: [companyId], references: [id])

  @@index([orderNumber])
  @@index([status])
  @@index([companyId])
}

model OrderItem {
  id           String    @id @default(cuid())
  quantity     Int
  orderId      String
  itemId       String
  order        Order     @relation(fields: [orderId], references: [id])
  item         Item      @relation(fields: [itemId], references: [id])
  pickLocation String?   // Will be filled by the system based on FIFO
  status       String    @default("PENDING") // PENDING, PICKED, CANCELLED

  @@index([orderId])
  @@index([itemId])
}